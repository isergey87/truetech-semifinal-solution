import numpy as np
import struct
import time

HEADER = 0x54
VERLEN = 0x2C
FRAME_LEN = 47
POINTS_PER_PACK = 12
BYTES_PER_POINT = 3

CrcTable = [
    0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25, 0x8b, 0xc6, 0x11, 0x5c,
    0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07, 0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5,
    0x1f, 0x52, 0x85, 0xc8, 0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,
    0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93, 0x3d, 0x70, 0xa7, 0xea,
    0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90, 0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62,
    0x97, 0xda, 0x0d, 0x40, 0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,
    0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04, 0xaa, 0xe7, 0x30, 0x7d,
    0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26, 0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4,
    0x7c, 0x31, 0xe6, 0xab, 0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,
    0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0, 0x5e, 0x13, 0xc4, 0x89,
    0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd, 0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f,
    0xca, 0x87, 0x50, 0x1d, 0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,
    0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67, 0xc9, 0x84, 0x53, 0x1e,
    0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45, 0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7,
    0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,
    0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
]

def calc_crc(data: bytes, init_crc: int = 0) -> int:
    crc = init_crc
    for b in data:
        crc = CrcTable[(crc ^ b) & 0xFF]
    return crc

def checksum_ok(frame: bytes) -> bool:
    body = frame[:-1]
    tail = frame[-1]
    return (
        calc_crc(body) == tail
    )


def sync_and_read_frame(get_data, timeout_s: float, ) -> bytes | None:
    """Find 0x54 0x2C and return a full CRC-validated 47-byte frame or None on timeout."""
    start = time.time()
    buf = bytearray()
    while time.time() - start < timeout_s:
        chunk = get_data(128)
        if not chunk:
            continue
        buf.extend(chunk)

        i = 0
        while i <= len(buf) - 2:
            if buf[i] == HEADER and buf[i+1] == VERLEN:
                if len(buf) - i < FRAME_LEN:
                    break
                frame = bytes(buf[i:i+FRAME_LEN])
                if checksum_ok(frame):
                    del buf[:i+FRAME_LEN]
                    return frame
                i += 1
                continue
            i += 1

        if len(buf) > 1024:
            del buf[:512]
    return None

def parse_frame(frame: bytes):
    """Парсит один 47-байтный фрейм и возвращает словарь с данными и points в np.ndarray."""
    if len(frame) != FRAME_LEN or frame[0] != HEADER or frame[1] != VERLEN:
        return None

    # --- 1. Заголовок ---
    # '<BBHH' = header, verlen, speed, start_angle
    header, verlen, speed, start_angle = struct.unpack_from('<BBHH', frame, 0)

    # --- 2. Сырые точки (векторно) ---
    # каждая точка = 3 байта: dist_mm (uint16), intensity (uint8)
    raw_points = np.frombuffer(frame, dtype=np.uint8, offset=6, count=POINTS_PER_PACK * BYTES_PER_POINT)
    raw_points = raw_points.reshape(POINTS_PER_PACK, BYTES_PER_POINT)

    # дистанции
    dist_mm = raw_points[:, 0].astype(np.uint16) | (raw_points[:, 1].astype(np.uint16) << 8)
    intensity = raw_points[:, 2]

    # --- 3. Углы ---
    end_angle, ts_ms = struct.unpack_from('<HH', frame, 42)
    start_deg = (start_angle % 36000) / 100.0
    end_deg = (end_angle % 36000) / 100.0
    angle_diff = (end_deg - start_deg) % 360.0
    step = angle_diff / (POINTS_PER_PACK - 1) if POINTS_PER_PACK > 1 else 0.0
    angles_deg = (start_deg + np.arange(POINTS_PER_PACK) * step) % 360.0

    # --- 4. Фильтрация невалидных ---
    mask = (dist_mm != 0) & (dist_mm != 0xFFFF) & (intensity > 0)
    if not np.any(mask):
        return None

    dist_m = dist_mm[mask].astype(np.float32) / 1000.0
    angles_deg = angles_deg[mask]

    # --- 5. Формируем points для add_points_to_map() ---
    # Возвращаем массив (N, 2): [угол°, дистанция м]
    points = np.column_stack((angles_deg, dist_m))

    return {
        "speed": speed,
        "start_deg": start_deg,
        "end_deg": end_deg,
        "timestamp_ms": ts_ms,
        "points": points,
    }
